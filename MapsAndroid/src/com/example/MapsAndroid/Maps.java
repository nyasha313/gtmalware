 package com.example.MapsAndroid;

import java.io.IOException;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import com.example.MapsAndroid.DrivingDirections.Mode;
import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.Overlay;
import com.google.android.maps.OverlayItem;
import com.google.android.maps.Projection;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.DashPathEffect;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.location.Address;
import android.location.Geocoder;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.Toast;

public class Maps extends MapActivity implements DrivingDirections.IDirectionsListener {

	List<Overlay> mapOverlays;
	Drawable drawable;
	HelloItemizedOverlay itemizedOverlay;
	MapView mapView;
	//Canvas canvas = new Canvas();
	LocationOverlay lineObj;
	Geocoder gc;
	double lat;
	double lon;
	Button btnSearch;
	EditText sourceAddress, destAddress;
	EditText viapoint;//added
	//Spinner intpoints; //added
	Button btnAddviapoint;//added
	Button btnRemviapoint;//added
	
    
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		mapView = (MapView) findViewById(R.id.mapview);
		mapView.setBuiltInZoomControls(true);
		//mapView.draw(canvas);

		btnSearch = (Button) findViewById(R.id.mapview_btn_search); //Get button from XML 
	    sourceAddress = (EditText) findViewById(R.id.source_address); //Get source address from XML
	    destAddress = (EditText) findViewById(R.id.dest_address); //Get destination address from XML
	    viapoint = (EditText) findViewById(R.id.via_point); //added
	    btnAddviapoint = (Button) findViewById(R.id.btn_addviapoint);
	    btnRemviapoint= (Button)findViewById(R.id.btn_remviapoint);
	    //intpoints = (Spinner) findViewById(R.id.intdropdown);//added
	    
	    //ArrayAdapter adapter = ArrayAdapter.createFromResource(this, R.array.categories, android.R.layout.simple_spinner_item); //added
	    //adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); //added
	    //intpoints.setAdapter(adapter); //added
	    
	   
	    
	    
		mapOverlays = mapView.getOverlays();
		drawable = this.getResources().getDrawable(R.drawable.square);
		itemizedOverlay = new HelloItemizedOverlay(drawable);

		//String address = "Atlanta";
		//Context context = getApplicationContext();

		GeoPoint p = new GeoPoint(19240000,-99120000);
		MapController mc = mapView.getController();
		
		
		gc = new Geocoder(this); //create new geocoder instance 
		
		btnRemviapoint.setOnClickListener(new OnClickListener() { 
		      public void onClick(View v) { 
			        
			        String viaPoint = viapoint.getText().toString(); //added
			                     
			        try { 
			                       
			          
			          List<Address> foundviaAdresses = gc.getFromLocationName(viaPoint, 5); //Search addresses 
	                  
			          if (foundviaAdresses.size() == 0) { //if no address found, display an error 
			            Dialog locationError = new AlertDialog.Builder(Maps.this) 
			              .setIcon(0) 
			              .setTitle("Error") 
			              .setPositiveButton(R.string.ok, null) 
			              .setMessage("Sorry, your via address doesn't exist.") 
			              .create(); 
			            locationError.show(); 
			          } 
			          else { //else display address on map 
			            for (int i = 0; i < foundviaAdresses.size(); ++i) { 
			              //Save results as Longitude and Latitude 
			              //@todo: if more than one result, then show a select-list 
			              Address x = foundviaAdresses.get(i); 
			              lat = x.getLatitude(); 
			              lon = x.getLongitude(); 
			            } 
			          navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
			          GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
			          removeIconOnScreen(p);
			          }
			          
			          
			        } 
			        catch (Exception e) { 
			          //@todo: Show error message 
			        } 
			                     
			      } 
			    });
		
		btnAddviapoint.setOnClickListener(new OnClickListener() { 
		      public void onClick(View v) { 
			        
			        String viaPoint = viapoint.getText().toString(); //added
			                     
			        try { 
			                       
			          
			          List<Address> foundviaAdresses = gc.getFromLocationName(viaPoint, 5); //Search addresses 
	                  
			          if (foundviaAdresses.size() == 0) { //if no address found, display an error 
			            Dialog locationError = new AlertDialog.Builder(Maps.this) 
			              .setIcon(0) 
			              .setTitle("Error") 
			              .setPositiveButton(R.string.ok, null) 
			              .setMessage("Sorry, your via address doesn't exist.") 
			              .create(); 
			            locationError.show(); 
			          } 
			          else { //else display address on map 
			            for (int i = 0; i < foundviaAdresses.size(); ++i) { 
			              //Save results as Longitude and Latitude 
			              //@todo: if more than one result, then show a select-list 
			              Address x = foundviaAdresses.get(i); 
			              lat = x.getLatitude(); 
			              lon = x.getLongitude(); 
			            } 
			          navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
			          GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
			          drawIconOnScreen(p);
			          }
			          
			          
			        } 
			        catch (Exception e) { 
			          //@todo: Show error message 
			        } 
			                     
			      } 
			    });
		
		btnSearch.setOnClickListener(new OnClickListener() { 
		      public void onClick(View v) { 
		        String addressInput = sourceAddress.getText().toString(); //Get input text 
		        String destAddressInput = destAddress.getText().toString(); //Get input text
		        String viaPoint = viapoint.getText().toString(); //added
		                     
		        try { 
		                          
		          List<Address> foundAdresses = gc.getFromLocationName(addressInput, 5); //Search addresses 
		                          
		          if (foundAdresses.size() == 0) { //if no address found, display an error 
		            Dialog locationError = new AlertDialog.Builder(Maps.this) 
		              .setIcon(0) 
		              .setTitle("Error") 
		              .setPositiveButton(R.string.ok, null) 
		              .setMessage("Sorry, your source address doesn't exist.") 
		              .create(); 
		            locationError.show(); 
		          } 
		          else { //else display address on map 
		            for (int i = 0; i < foundAdresses.size(); ++i) { 
		              //Save results as Longitude and Latitude 
		              //@todo: if more than one result, then show a select-list 
		              Address x = foundAdresses.get(i); 
		              lat = x.getLatitude(); 
		              lon = x.getLongitude(); 
		            } 
		          navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
		          GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
		          drawIconOnScreen(p);
		          }
		          
		          // This is for the destination address
		          
		          List<Address> foundDestAddresses = gc.getFromLocationName(destAddressInput, 5); //Search addresses 
                  
		          if (foundDestAddresses.size() == 0) { //if no address found, display an error 
		            Dialog locationError = new AlertDialog.Builder(Maps.this) 
		              .setIcon(0) 
		              .setTitle("Error") 
		              .setPositiveButton(R.string.ok, null) 
		              .setMessage("Sorry, your destination address doesn't exist.") 
		              .create(); 
		            locationError.show(); 
		          } 
		          else { //else display address on map 
		            for (int i = 0; i < foundDestAddresses.size(); ++i) { 
		              //Save results as Longitude and Latitude 
		              //@todo: if more than one result, then show a select-list 
		              Address x = foundDestAddresses.get(i); 
		              lat = x.getLatitude(); 
		              lon = x.getLongitude(); 
		            } 
		          navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
		          GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
		          drawIconOnScreen(p);
		          
		          
		          }
		          
		          
		        } 
		        catch (Exception e) { 
		          //@todo: Show error message 
		        } 
		                     
		      } 
		    }); 


		/*
		GeoPoint point = new GeoPoint(25774265, -80193658);
		//OverlayItem overlayitem = new OverlayItem(point, "", "");

		GeoPoint endPoint = new GeoPoint(33748995,-84387982);
		//OverlayItem endOverlayitem = new OverlayItem(endPoint, "", "");

		mc.animateTo(point);
		mc.setZoom(5);
		DrivingDirections.Mode mode = Mode.DRIVING;
		DrivingDirections directions = DrivingDirectionsFactory.createDrivingDirections(); 
		//directions.driveTo(point, endPoint, mode, this);*/
	}

	public void drawIconOnScreen(GeoPoint pointOnScreen) {
		OverlayItem item = new OverlayItem(pointOnScreen,"","");
		itemizedOverlay.addOverlay(item);
		mapOverlays.add(itemizedOverlay);
		//mapOverlays.remove(itemizedOverlay);
	}
	
	public void removeIconOnScreen(GeoPoint pointOnScreen) {
		OverlayItem item = new OverlayItem(pointOnScreen,"","");
		itemizedOverlay.removeOverlay(item);
		mapOverlays.remove(itemizedOverlay);
	}
	
	
	
	public void toastHere(CharSequence text) {
		Context context = getApplicationContext();
		int duration = Toast.LENGTH_LONG;

		Toast toast = Toast.makeText(context, text, duration);
		toast.show();
	}

	@Override
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public void onDirectionsAvailable(Route route, Mode mode) {
		// TODO Auto-generated method stub
		List<GeoPoint> geoPoints = route.getGeoPoints();
		int size = geoPoints.size();
		toastHere("Available! " + String.valueOf(size));

		List<Overlay> listOfOverlays = mapView.getOverlays();

		Paint paint = new Paint();
		paint.setStrokeWidth(3);
		paint.setAntiAlias(true);
		if ((mode != null) && (mode == Mode.DRIVING)) {
			paint.setARGB(64, 0, 0, 255);
		}
		else {
			paint.setARGB(96, 0, 0, 0);
			paint.setPathEffect(new DashPathEffect(new float[]{8, 4}, 1));
		}
		
		GeoPoint print = new GeoPoint(0, 0);
		for (int i = 0; i < geoPoints.size() - 1; i++)
		{
			// Convert the starting geographical point coordinates to screen coordinates.
			//
			GeoPoint startGeoPoint = geoPoints.get(i);
			Point startScreenPoint = new Point ();
			mapView.getProjection().toPixels(startGeoPoint, startScreenPoint);

			// Convert the ending geographical point coordinates to screen coordinates.
			//
			GeoPoint endGeoPoint = geoPoints.get (i + 1);
			Point endScreenPoint = new Point ();
			mapView.getProjection().toPixels(endGeoPoint, endScreenPoint);

			print = endGeoPoint;
			// Draw a joining line between the starting and the ending points.
			//
			
			lineObj = new LocationOverlay(startScreenPoint, endScreenPoint, paint);
	        listOfOverlays.add(lineObj);
	        
			//lineObj.draw(canvas, mapView, true);
		}
		drawIconOnScreen(print);
        //listOfOverlays.clear();
		
	}

	@Override
	public void onDirectionsNotAvailable() {
		// TODO Auto-generated method stub
		toastHere("Not Available!");

	}
	public static void navigateToLocation (double latitude, double longitude, MapView mv) { 
	    GeoPoint p = new GeoPoint((int) latitude, (int) longitude); //new GeoPoint 
	    mv.displayZoomControls(true); //display Zoom (seems that it doesn't work yet) 
	    MapController mc = mv.getController(); 
	    mc.animateTo(p); //move map to the given point 
	    //int zoomlevel = mv.getMaxZoomLevel(); //detect maximum zoom level 
	    //mc.setZoom(zoomlevel - 1); //zoom 
	    mv.setSatellite(false); //display only "normal" mapview  
	  } 
}
