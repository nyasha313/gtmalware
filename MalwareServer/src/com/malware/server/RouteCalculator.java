package com.malware.server;

import java.util.ArrayList;
import java.util.List;

import javax.jdo.PersistenceManager;

import com.google.appengine.repackaged.com.google.common.base.Pair;
import com.malware.common.dto.Trip;

/**
 * Performs the route calculation.
 */
public class RouteCalculator {

	@SuppressWarnings("unchecked")
	public static List<Trip> getBestTripsForADriver(Trip driverTrip) {
		PersistenceManager pm = PMF.get().getPersistenceManager();

		// TODO(kaushikr): Make a query with searchKeyword.
		String query = "select from " + Trip.class.getName();
		
		/* GeoHash used to overcome limitation of GQL */
		//Geohash geohash = new Geohash();
		
		/* List of strings consisting of geohash of all points along the route */
		List<Pair<Integer, Integer>> driverGeoPoints = new ArrayList<Pair<Integer,Integer>>();
		//List<String> geoPointsAsHash = new ArrayList<String>();
		
		/*Source address*/
		//geoPointsAsHash.add( geohash.encode(riderTrip.getSourceLat(),riderTrip.getSourceLng()) );
		driverGeoPoints.add(new Pair<Integer, Integer>(driverTrip.getSourceLat(), 
				driverTrip.getSourceLng()));
		
		/*Via Points*/
		
		List<Integer> viaPointsLat = driverTrip.getViaPointsLat();
		List<Integer> viaPointsLng = driverTrip.getViaPointsLng();
		for(int i = 0; i< viaPointsLat.size(); ++i) {
			//geoPointsAsHash.add( geohash.encode(viaPointsLat.get(i), viaPointsLng.get(i)) );
			driverGeoPoints.add(new Pair<Integer, Integer>(viaPointsLat.get(i), viaPointsLng.get(i)));
		}
		
		/* Destination address */
		//geoPointsAsHash.add( geohash.encode(riderTrip.getDestinationLat(), riderTrip.getDestinationLng()) );
		driverGeoPoints.add(new Pair<Integer, Integer>(driverTrip.getDestinationLat(), 
				driverTrip.getDestinationLng()));
		
		/* Circles between sets of two points as end points of the diameter */
		for(int i = 0; i<driverGeoPoints.size(); ++i) {
			String condition="where";
			List<Trip> trips = (List<Trip>) pm.newQuery(query+condition).execute();
		}
		
		List<Trip> trips = (List<Trip>) pm.newQuery(query).execute();
		//trips = pm.getObjectById(Trip.class);
		
		return trips;
	}
	
	@SuppressWarnings("unchecked")
	public static List<Trip> getBestTripsForARider(Trip riderTrip) {
		PersistenceManager pm = PMF.get().getPersistenceManager();

		// TODO(kaushikr): Make a query with searchKeyword.
		String query = "select from " + Trip.class.getName();
		List<Trip> trips = (List<Trip>) pm.newQuery(query).execute();

		return trips;	
	}
	
	public static Pair<Integer, Integer> getCenter(Pair<Integer, Integer> endPointA , 
			Pair<Integer, Integer> endPointB) {
		Integer CenterLat = (endPointA.first + endPointB.first)/2;
		Integer CenterLng = (endPointA.second + endPointB.second)/2;

		Pair<Integer, Integer> Center = new Pair<Integer, Integer> ( CenterLat, CenterLng);
		
		return Center;
	}
	
	public static Integer getRadius(Pair<Integer, Integer> endPointA , 
			Pair<Integer, Integer> endPointB) {
		Integer x = Math.abs(endPointA.first - endPointB.first);
		x *= x;
		Integer y = Math.abs(endPointA.second - endPointB.second);
		y *= y;
		
		Integer radius = (int) Math.sqrt( new Double(x-y) );
		radius = radius / 2;
		return radius;
	}
}
