package com.malware.server;
import java.io.IOException;
import java.net.URLEncoder;
import java.util.Date;
import java.util.List;

import javax.jdo.PersistenceManager;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.Gson;
import com.malware.common.constants.Constants;
import com.malware.common.dto.ServerRequest;
import com.malware.common.dto.ServerResponse;
import com.malware.common.dto.Trip;
import com.malware.common.dto.User;
import com.malware.common.dto.ServerRequest.ServerMethod;
import com.malware.server.maps.Route;

@SuppressWarnings("serial")
public class MalwareServerServlet extends HttpServlet {
	
	// Some static members which we need only one instance of, and hence onl instantiating once.
	// The Java Object to Json convertor.
	public static Gson gson = new Gson();
	
	public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		resp.setContentType("text/plain");
		
		resp.getWriter().println("You have reached the server API for " + Constants.PROJECT_NAME + ".");
		resp.getWriter().println("If you want to access the API you're better off POSTing to this URL.");
		
		ServerRequest request = new ServerRequest();
		request.setServerMethod(ServerMethod.STORE_FACEBOOK_INFORMATION);
		User user = new User();
		user.setEmail("a");
		User.FacebookInformation facebook = new User.FacebookInformation();
		facebook.setUid("10000");
		user.setFacebookInformation(facebook);
		request.setUser(user);
		resp.getWriter().println(URLEncoder.encode(gson.toJson(request)));
		
		resp.getWriter().println("");
		user = new User("a", "a", "a", "a", "a", "a", "a", "a");
		request = new ServerRequest();
		request.setServerMethod(ServerMethod.STORE_NEW_USER);
		request.setUser(user);
		resp.getWriter().println(URLEncoder.encode(gson.toJson(request)));
		
		resp.getWriter().println("");
		request = new ServerRequest();
		request.setServerMethod(ServerMethod.STORE_TRIP);
		Trip trip = new Trip();
		request.setTrip(trip);
		trip.setSourceLat(12345678);
		trip.setSourceLng(12345678);
		trip.setDestinationLat(12345678);
		trip.setDestinationLng(12345678);
		trip.setUserEmailAddress("myemail@yahoomail.com");
		trip.setDriverTrip(true);
		trip.setNumSeatsAvailable(5);
		
		Date earliestStartDate = new Date(110, 3, 11, 10, 30);
		trip.setEarliestStartDateTime(earliestStartDate);
		
		Date latestStartDate = new Date(110, 3, 11, 11, 30);
		trip.setLatestStartDateTime(latestStartDate);
		resp.getWriter().println(URLEncoder.encode(gson.toJson(request)));
		
//		User user = new User("name", 0.1, "promotion", "address", 0.5, 0.6);
//		Gson gson = new Gson();
//		System.out.println(gson.toJson(user));
		
//		LatLng start = new LatLng(34.019968, -118.289988);
//		LatLng end = new LatLng(38.019968, -118.289988);
//		
//		Route route = GoogleMaps.getRoute(start, end);
//		
//		resp.getWriter().println("Driving Distance between: " + start + " and " + end + " is: " +
//								 route.getDistanceInMetres());
//		
//		resp.getWriter().println(route.getJson());
		
//		// Make the Route object persistent.
//		PersistenceManager pm = PMF.get().getPersistenceManager();
//        try {
//        	route.makePersistable();
//            pm.makePersistent(route);
//        } finally {
//            pm.close();
//        }
//        
//        // Displaying all the current persistent routes.
//        resp.getWriter().println("Objects in the store: ");
//        
//        pm = PMF.get().getPersistenceManager();
//        String query = "select from " + Route.class.getName();
//        List<Route> routes = (List<Route>) pm.newQuery(query).execute();
//        if (routes.isEmpty()) {
//        	resp.getWriter().println("No objects in store.");	
//        } else {
//        	int count = routes.size();
//        	resp.getWriter().println("Count of objects in store: " + count);
//        }
	}
	
	/**
	 * Our dispatcher method which launches the required methods based on the parameters
	 * received as input.
	 */
	public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		resp.setContentType("text/plain");
		
		// Figure out which SERVER method is being requested.
		String serverRequestJson = req.getParameter(Constants.URL.SERVER_REQUEST_DATA);
		ServerRequest serverRequest = null;
		if (serverRequestJson != null) {
			serverRequest = gson.fromJson(serverRequestJson, ServerRequest.class);
			System.out.println("Got request: " + serverRequestJson);
		} else {
			String message = "Invalid JSON";
			System.out.println(message);
			resp.getWriter().println(message);
			return;
		}
		
		ServerResponse serverResponse = null;
		if (serverRequest.getServerMethod() == ServerMethod.STORE_NEW_USER) {
			serverResponse = StoreNewUserMethod.execute(serverRequest);
		} else if (serverRequest.getServerMethod() == ServerMethod.VERIFY_USER) {
			serverResponse = VerifyUserMethod.execute(serverRequest);
		} else if (serverRequest.getServerMethod() == ServerMethod.STORE_FACEBOOK_INFORMATION) {
			serverResponse = StoreFacebookInformationMethod.execute(serverRequest);
		} else if (serverRequest.getServerMethod() == ServerMethod.STORE_TRIP) {
			serverResponse = StoreTripMethod.execute(serverRequest);
		} else if (serverRequest.getServerMethod() == ServerMethod.GET_USER_INFO) {
			resp.getWriter().println("Method: " + serverRequest.getServerMethod() + "  currently not supported.");
		} else if (serverRequest.getServerMethod() == ServerMethod.TEST_CODE) {
			System.out.println("Executing arbitrary test code.");
			resp.getWriter().println("Executing arbitrary test code. Output is:");
			resp.getWriter().println(testCode());
		} else {
			resp.getWriter().println("We really have no idea what you're trying to say.");
			return;
		}

		resp.getWriter().print(gson.toJson(serverResponse));
	}
	
	/**
	 * Really experimental code which we just put here for quick development.
	 */
	public String testCode() {
		String output = "";
		
		PersistenceManager pm = PMF.get().getPersistenceManager();
		
		String queryString = "select from " + Route.class.getName();
		List<Route> routes = (List<Route>) pm.newQuery(queryString).execute();
		if (routes.isEmpty()) {
        	output = "No objects in store.";	
        } else {
        	int count = routes.size();
        	output = "Count of objects in store: " + count;
        }
		
        pm.close();
        
        return output;
	}
}
