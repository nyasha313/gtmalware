package com.malware.android;

import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.location.Location;
import android.os.Bundle;
import android.os.Handler;
import android.util.Config;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.widget.Toast;

import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.Overlay;
import com.google.android.maps.Projection;

import de.android1.overlaymanager.ManagedOverlay;
import de.android1.overlaymanager.ManagedOverlayItem;
import de.android1.overlaymanager.MarkerRenderer;
import de.android1.overlaymanager.OverlayManager;
import de.android1.overlaymanager.ZoomEvent;
import de.android1.overlaymanager.ManagedOverlayGestureDetector.OnOverlayGestureListener;

public class MalwareRequest extends MapActivity{

	private MapView myMapView = null;
	private MapController mapControl;
	public static Context cntxt;

	private List<Overlay> mapOverlays;
	private drawLineVector positionOverlay;

	OverlayManager overlayManager;
	ManagedOverlay managedOverlay;
	ManagedOverlayItem itemred;
	ArrayList<ManagedOverlayItem> mylist;

	public double myLat = 33.736118;
	public double myLng = -84.371181;

	public double lat2 = 33.936118;
	public double lng2 = -84.571181;
	
	public static boolean timerOn = false;
	
	public static boolean markerCheckBox = false;

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);
		myMapView = (MapView) findViewById(R.id.map);
		myMapView.setBuiltInZoomControls(true);
		mapControl = myMapView.getController();
		mapControl.setZoom(3);

		cntxt = this.getApplicationContext();

		// create an overlayManager that displays markers on the map
		overlayManager = new OverlayManager(getApplication(), myMapView);

		managedOverlay = overlayManager.createOverlay("DatabaseMarkers",
				getResources().getDrawable(R.drawable.ledorange));

		managedOverlay.setCustomMarkerRenderer(new MarkerRenderer() {

			public Drawable render(ManagedOverlayItem item,
					Drawable defaultMarker, int bitState) {
				if (item.getCustomRenderedDrawable() != null)
					return item.getCustomRenderedDrawable();

				BitmapDrawable b = (BitmapDrawable) defaultMarker;
				Bitmap bitmap = Bitmap.createBitmap(b.getBitmap().copy(
						Bitmap.Config.ARGB_8888, true));
				Canvas canvas = new Canvas(bitmap);
				Paint p = new Paint();

				if (item.getTitle().equals("R")) {
					p.setColor(Color.RED);
					p.setAntiAlias(true);
					p.setTextSize(12);
					canvas.drawText(item.getTitle(), 7, 15, p);
				} else {
					p.setColor(Color.BLACK);
					p.setAntiAlias(true);
					p.setTextSize(10);
					if (item.getTitle().equals("10"))
						canvas.drawText(item.getTitle(), 5, 15, p);
					else
						canvas.drawText(item.getTitle(), 8, 15, p);
				}
				BitmapDrawable bd = new BitmapDrawable(bitmap);
				bd.setBounds(0, 0, bd.getIntrinsicWidth(), bd
						.getIntrinsicHeight());

				item.setCustomRenderedDrawable(bd);
				return bd;
			}
		});

		// code to detect taps on screen and markers.
		managedOverlay
				.setOnOverlayGestureListener(new OnOverlayGestureListener() {

					public boolean onZoom(ZoomEvent zoom, ManagedOverlay overlay) {
						return false;
					}

					public boolean onSingleTap(MotionEvent e,
							ManagedOverlay overlay, GeoPoint point,
							ManagedOverlayItem item) {
						if (item != null)
							Toast.makeText(getApplicationContext(),
									item.getSnippet(), Toast.LENGTH_SHORT)
									.show();
						else
							Toast.makeText(getApplicationContext(),
									point.toString(), Toast.LENGTH_SHORT)
									.show();
						return true;
					}

					public boolean onScrolled(MotionEvent e1, MotionEvent e2,
							float distanceX, float distanceY,
							ManagedOverlay overlay) {
						return false;
					}

					public void onLongPressFinished(MotionEvent e,
							ManagedOverlay overlay, GeoPoint point,
							ManagedOverlayItem item) {

					}

					public void onLongPress(MotionEvent e,
							ManagedOverlay overlay) {

					}

					/**
					 * Image and Sound Preview go here
					 */
					public boolean onDoubleTap(MotionEvent e,
							ManagedOverlay overlay, GeoPoint point,
							ManagedOverlayItem item) {
								return false;
					
					}
				});

		/**
		 * Initialize itemRed for render sound to reference this location in the
		 * beginning -- Grant Park
		 */
		itemred = new ManagedOverlayItem(new GeoPoint(33736118, -84371181),
				"R", "Render Point");
		managedOverlay.add(itemred);
		overlayManager.populate();

		// background thread fetches data from servlet.
		
		// timer, sensors, checkbox and overlay
		final Handler handler = new Handler();

		
		positionOverlay = new drawLineVector(cntxt);
		mapOverlays = myMapView.getOverlays();
		mapOverlays.add(positionOverlay);

	} // End of onCreate() method.

	@Override
	protected boolean isRouteDisplayed() {
		return false;
	}

	public class drawLineVector extends Overlay {

		private Location location;

		// private GeoPoint locationPoint;

		public drawLineVector(Context cntxt) {
		}

		public Location getLocation() {
			return location;
		}

		public void setLocation(Location location) {
			this.location = location;
			// Double latitude = location.getLatitude() * 1E6;
			// Double longitude = location.getLongitude() * 1E6;
			// locationPoint = new GeoPoint(latitude.intValue(), longitude
			// .intValue());
		}

		@Override
		public boolean onTap(GeoPoint point, MapView mapView) {
			return false;
		}

	}
}