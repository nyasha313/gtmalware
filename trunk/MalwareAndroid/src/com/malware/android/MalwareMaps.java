package com.malware.android;


import java.util.List;
import java.util.Vector;

import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.Overlay;
import com.google.android.maps.OverlayItem;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.DashPathEffect;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.location.Address;
import android.location.Geocoder;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import android.app.NotificationManager;
import android.app.Notification;
import com.malware.maps.*;

public class MalwareMaps extends MapActivity{

	List<Overlay> mapOverlays;
	Drawable drawable;
	HelloItemizedOverlay itemizedOverlay;
	MapView mapView;
	//Canvas canvas = new Canvas();
	Geocoder gc;
	double lat;
	double lon;
	Button btnSearch;
	EditText sourceAddress, destAddress;
	EditText viapoint, viapoint2, viapoint3, viapoint4;//added
	TextView intpoint, intpoint2, intpoint3, intpoint4;

	int indexOfSourceAddress;
	int indexOfDestAddress;
	int indexOfviaAddress1;
	int indexOfviaAddress2;
	int indexOfviaAddress3;
	int indexOfviaAddress4;

	List<Address> foundAdresses;
	List<Address> foundDestAddresses;
	List<Address> foundviaAddress1;
	List<Address> foundviaAddress2;
	List<Address> foundviaAddress3;
	List<Address> foundviaAddress4;

	//Spinner intpoints; //added
	Button btnAddviapoint;//added
	Button btnRemviapoint;//added

	Context myContext;

	static int count=0;
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.malware_map);
		myContext = this;
		mapView = (MapView) findViewById(R.id.mapview);
		mapView.setBuiltInZoomControls(true);


		btnSearch = (Button) findViewById(R.id.mapview_btn_search); //Get button from XML 
		sourceAddress = (EditText) findViewById(R.id.source_address); //Get source address from XML
		destAddress = (EditText) findViewById(R.id.dest_address); //Get destination address from XML
		viapoint = (EditText) findViewById(R.id.via_point); //added
		btnAddviapoint = (Button) findViewById(R.id.btn_addviapoint);
		//    btnRemviapoint= (Button)findViewById(R.id.btn_remviapoint);
		viapoint2 = (EditText) findViewById(R.id.via_point2);
		viapoint3 = (EditText) findViewById(R.id.via_point3);
		intpoint2 = (TextView) findViewById(R.id.interpoint2);
		intpoint3 = (TextView) findViewById(R.id.interpoint3);
		intpoint = (TextView) findViewById(R.id.interpoint);
		viapoint4 = (EditText) findViewById(R.id.via_point4);
		intpoint4 = (TextView) findViewById(R.id.interpoint4);

		viapoint4.setVisibility(View.INVISIBLE);
		intpoint4.setVisibility(View.INVISIBLE);
		viapoint2.setVisibility(View.INVISIBLE);
		viapoint3.setVisibility(View.INVISIBLE);
		intpoint2.setVisibility(View.INVISIBLE);
		intpoint3.setVisibility(View.INVISIBLE);
		viapoint.setVisibility(View.INVISIBLE);
		intpoint.setVisibility(View.INVISIBLE);
		//btnRemviapoint.setVisibility(View.INVISIBLE);


		mapOverlays = mapView.getOverlays();
		drawable = this.getResources().getDrawable(R.drawable.square);
		itemizedOverlay = new HelloItemizedOverlay(drawable);

		GeoPoint p = new GeoPoint(19240000,-99120000);
		MapController mc = mapView.getController();


		gc = new Geocoder(this); //create new geocoder instance 
		/*
		btnRemviapoint.setOnClickListener(new OnClickListener() { 
		      public void onClick(View v) { 

			        String viaPoint = viapoint.getText().toString(); //added

			        try { 


			          List<Address> foundviaAdresses = gc.getFromLocationName(viaPoint, 5); //Search addresses 

			          if (foundviaAdresses.size() == 0) { //if no address found, display an error 
			            Dialog locationError = new AlertDialog.Builder(myContext) 
			              .setIcon(0) 
			              .setTitle("Error") 
			              .setPositiveButton("Ok", null) 
			              .setMessage("Sorry, your via address doesn't exist.") 
			              .create(); 
			            locationError.show(); 
			          } 
			          else { //else display address on map 
			            for (int i = 0; i < foundviaAdresses.size(); ++i) { 
			              //Save results as Longitude and Latitude 
			              //@todo: if more than one result, then show a select-list 
			              Address x = foundviaAdresses.get(i); 
			              lat = x.getLatitude(); 
			              lon = x.getLongitude(); 
			            } 
			          navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
			          GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
			          removeIconOnScreen(p);
			          }


			        } 
			        catch (Exception e) { 
			          //@todo: Show error message 
			        } 

			      } 
			    });
		 */
		btnAddviapoint.setOnClickListener(new OnClickListener() { 
			public void onClick(View v) { 

				String viaPoint = viapoint.getText().toString(); //added
				count++;

				if(count == 1)
				{
					intpoint.setVisibility(0);
					viapoint.setVisibility(0);
				}
				else if(count == 2)
				{
					viapoint2.setVisibility(0);
					intpoint2.setVisibility(0);
				}
				else if(count == 3)
				{
					viapoint3.setVisibility(0);
					intpoint3.setVisibility(0);
				}
				else if(count == 4)
				{
					viapoint4.setVisibility(0);
					intpoint4.setVisibility(0);
				}
			} 
		});

		sourceAddress.setOnFocusChangeListener(new OnFocusChangeListener() {

			@Override
			public void onFocusChange(View arg0, boolean arg1) {
				// TODO Auto-generated method stub
				if(arg1 == false) {
					String addressInput = sourceAddress.getText().toString(); //Get input text 		                     
					try {                             
						foundAdresses = gc.getFromLocationName(addressInput, 10); //Search addresses 
						Bundle extras = new Bundle();   

						if (foundAdresses.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your source address doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 
						else { //else display address on map
							int i;
							String sendAddresses = "";
							for ( i = 0; i < foundAdresses.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundAdresses.get(i);
								sendAddresses += foundAdresses.get(i).getFeatureName() + "$$$";
								indexOfSourceAddress = i;
								//addressIndices.remove(0);
								//addressIndices.add(0, i); 
							} 
							if(i > 1) {
								try {
									Intent intent=new Intent( MalwareMaps.this ,MalwareSelectAddress.class);
									intent.putExtra("addressFilter", sendAddresses);
									startActivityForResult(intent, 0);
								}
								catch(Exception e) {
									toastHere(e.toString());
								}
							}
						}
					}
					catch(Exception e) {
						toastHere(e.toString());
					}
				}
			}
		}
		);

		destAddress.setOnFocusChangeListener(new OnFocusChangeListener() {
			@Override
			public void onFocusChange(View arg0, boolean arg1) {
				// TODO Auto-generated method stub
				if(arg1 == false) {
					String destAddressInput = destAddress.getText().toString(); //Get input text		                     
					try {                             
						Bundle extras = new Bundle();
						foundDestAddresses = gc.getFromLocationName(destAddressInput, 5); //Search addresses 

						if (foundDestAddresses.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your destination address doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 						
						else { //else display address on map 
							int i = 0;
							String sendAddresses = "";
							for (i = 0; i < foundDestAddresses.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundDestAddresses.get(i); 
								sendAddresses += foundDestAddresses.get(i).getFeatureName() + "$$$";
								indexOfDestAddress = i;
								//addressIndices.remove(1);
								//addressIndices.add(1, i);
							}  
							if(i > 1) {
								try {
									Intent intent=new Intent( MalwareMaps.this ,MalwareSelectAddress.class);
									intent.putExtra("addressFilter", sendAddresses);
									startActivityForResult(intent, 1);
								}
								catch(Exception e) {
									toastHere(e.toString());
								}
							}
						}
					}
					catch(Exception e) {
						toastHere(e.toString());
					}
				}
			}
		}
		);

		viapoint.setOnFocusChangeListener(new OnFocusChangeListener() {
			@Override
			public void onFocusChange(View arg0, boolean arg1) {
				// TODO Auto-generated method stub
				if(arg1 == false) {
					String viaAddressInput = viapoint.getText().toString(); //Get input text		                     
					try {                             
						Bundle extras = new Bundle();
						foundviaAddress1 = gc.getFromLocationName(viaAddressInput, 5); //Search addresses 

						if (foundviaAddress1.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your via address doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 						
						else { //else display address on map 
							int i = 0;
							String sendAddresses = "";
							for (i = 0; i < foundviaAddress1.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundviaAddress1.get(i); 
								sendAddresses += foundviaAddress1.get(i).getFeatureName() + "$$$";
								indexOfviaAddress1 = i;
							}  
							if(i > 1) {
								try {
									Intent intent=new Intent( MalwareMaps.this ,MalwareSelectAddress.class);
									intent.putExtra("addressFilter", sendAddresses);
									startActivityForResult(intent, 2);
								}
								catch(Exception e) {
									toastHere(e.toString());
								}
							}
						}
					}
					catch(Exception e) {
						toastHere(e.toString());
					}
				}
			}
		}
		);

		viapoint2.setOnFocusChangeListener(new OnFocusChangeListener() {
			@Override
			public void onFocusChange(View arg0, boolean arg1) {
				// TODO Auto-generated method stub
				if(arg1 == false) {
					String viaAddressInput = viapoint2.getText().toString(); //Get input text		                     
					try {                             
						Bundle extras = new Bundle();
						foundviaAddress2 = gc.getFromLocationName(viaAddressInput, 5); //Search addresses 

						if (foundviaAddress2.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your via address doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 						
						else { //else display address on map 
							int i = 0;
							String sendAddresses = "";
							for (i = 0; i < foundviaAddress2.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundviaAddress2.get(i); 
								sendAddresses += foundviaAddress2.get(i).getFeatureName() + "$$$";
								indexOfviaAddress2 = i;
							}  
							if(i > 1) {
								try {
									Intent intent=new Intent( MalwareMaps.this ,MalwareSelectAddress.class);
									intent.putExtra("addressFilter", sendAddresses);
									startActivityForResult(intent, 3);
								}
								catch(Exception e) {
									toastHere(e.toString());
								}
							}
						}
					}
					catch(Exception e) {
						toastHere(e.toString());
					}
				}
			}
		}
		);

		viapoint3.setOnFocusChangeListener(new OnFocusChangeListener() {
			@Override
			public void onFocusChange(View arg0, boolean arg1) {
				// TODO Auto-generated method stub
				if(arg1 == false) {
					String viaAddressInput = viapoint3.getText().toString(); //Get input text		                     
					try {                             
						Bundle extras = new Bundle();
						foundviaAddress3 = gc.getFromLocationName(viaAddressInput, 5); //Search addresses 

						if (foundviaAddress3.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your via address doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 						
						else { //else display address on map 
							int i = 0;
							String sendAddresses = "";
							for (i = 0; i < foundviaAddress3.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundviaAddress3.get(i); 
								sendAddresses += foundviaAddress3.get(i).getFeatureName() + "$$$";
								indexOfviaAddress3 = i;
							}  
							if(i > 1) {
								try {
									Intent intent=new Intent( MalwareMaps.this ,MalwareSelectAddress.class);
									intent.putExtra("addressFilter", sendAddresses);
									startActivityForResult(intent, 4);
								}
								catch(Exception e) {
									toastHere(e.toString());
								}
							}
						}
					}
					catch(Exception e) {
						toastHere(e.toString());
					}
				}
			}
		}
		);

		viapoint4.setOnFocusChangeListener(new OnFocusChangeListener() {
			@Override
			public void onFocusChange(View arg0, boolean arg1) {
				// TODO Auto-generated method stub
				if(arg1 == false) {
					String viaAddressInput = viapoint4.getText().toString(); //Get input text		                     
					try {                             
						Bundle extras = new Bundle();
						foundviaAddress4 = gc.getFromLocationName(viaAddressInput, 5); //Search addresses 

						if (foundviaAddress4.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your via address doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 						
						else { //else display address on map 
							int i = 0;
							String sendAddresses = "";
							for (i = 0; i < foundviaAddress4.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundviaAddress4.get(i); 
								sendAddresses += foundviaAddress4.get(i).getFeatureName() + "$$$";
								indexOfviaAddress4 = i;
							}  
							if(i > 1) {
								try {
									Intent intent=new Intent( MalwareMaps.this ,MalwareSelectAddress.class);
									intent.putExtra("addressFilter", sendAddresses);
									startActivityForResult(intent, 5);
								}
								catch(Exception e) {
									toastHere(e.toString());
								}
							}
						}
					}
					catch(Exception e) {
						toastHere(e.toString());
					}
				}
			}
		}
		);
		// Click Event for GO

		btnSearch.setOnClickListener(new OnClickListener() { 
			public void onClick(View v) { 

				if( sourceAddress.hasFocus() ) {
					sourceAddress.clearFocus();
				}
				else if( destAddress.hasFocus() ) {
					destAddress.clearFocus();
				}
				else if( viapoint.hasFocus() ) {
					viapoint.clearFocus();
				}
				else if(viapoint2.hasFocus()) {
					viapoint2.clearFocus();
				}
				else if(viapoint3.hasFocus()) {
					viapoint3.clearFocus();
				}
				else if(viapoint4.hasFocus()) {
					viapoint4.clearFocus();
				}
				// Source address
				if(sourceAddress.getText().length() > 1) {
					lat = foundAdresses.get(indexOfSourceAddress).getLatitude();
					lon = foundAdresses.get(indexOfSourceAddress).getLongitude();
					navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
					GeoPoint sourceP = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
					drawIconOnScreen(sourceP);
				}

				// Destination address
				if(destAddress.getText().length() > 1) {
					lat = foundDestAddresses.get(indexOfDestAddress).getLatitude();
					lon = foundDestAddresses.get(indexOfDestAddress).getLongitude();
					navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
					GeoPoint destP = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
					drawIconOnScreen(destP);
				}


				// Via address

				if(viapoint.getText().length() > 1) {
					lat = foundviaAddress1.get(indexOfviaAddress1).getLatitude();
					lon = foundviaAddress1.get(indexOfviaAddress1).getLongitude();
					navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
					GeoPoint viaP1 = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
					drawIconOnScreen(viaP1);
				}

				if(viapoint2.getText().length() > 1) {
					lat = foundviaAddress2.get(indexOfviaAddress2).getLatitude();
					lon = foundviaAddress2.get(indexOfviaAddress2).getLongitude();
					navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
					GeoPoint viaP2 = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
					drawIconOnScreen(viaP2);
				}

				if(viapoint3.getText().length() > 1) {
					lat = foundviaAddress3.get(indexOfviaAddress3).getLatitude();
					lon = foundviaAddress3.get(indexOfviaAddress3).getLongitude();
					navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
					GeoPoint viaP3 = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
					drawIconOnScreen(viaP3);
				}

				if(viapoint4.getText().length() > 1) {
					lat = foundviaAddress4.get(indexOfviaAddress4).getLatitude();
					lon = foundviaAddress4.get(indexOfviaAddress4).getLongitude();
					navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
					GeoPoint viaP4 = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
					drawIconOnScreen(viaP4);
				}
			} 
		});     	
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent returnIntent) {
		super.onActivityResult(requestCode, resultCode, returnIntent);
		/*
		 * FIXME: sanity checks required here. app crashes if you press back
		 */
		Bundle extras = returnIntent.getExtras();
		String retAddr = (extras.getString("SelectedValue"));
		//addressIndices.remove(requestCode);
		//addressIndices.add(requestCode, indexOfAddress);
		//toastHere(String.valueOf(requestCode));
		
		if(requestCode == 0) {
			indexOfSourceAddress = Integer.parseInt(retAddr);
			String addr = (foundAdresses.get(indexOfSourceAddress).getFeatureName());
			sourceAddress.setText(addr);
		}
		else if(requestCode == 1) {
			indexOfDestAddress = Integer.parseInt(retAddr);
			String addr = (foundDestAddresses.get(indexOfDestAddress).getFeatureName());
			destAddress.setText(addr);
		}
		else if(requestCode == 2) {
			indexOfviaAddress1 = Integer.parseInt(retAddr);
			String addr = (foundviaAddress1.get(indexOfviaAddress1).getFeatureName());
			viapoint.setText(addr);
		}
		else if(requestCode == 3) {
			indexOfviaAddress2 = Integer.parseInt(retAddr);
			String addr = (foundviaAddress2.get(indexOfviaAddress2).getFeatureName());
			viapoint2.setText(addr);
		}
		else if(requestCode == 4) {
			indexOfviaAddress3 = Integer.parseInt(retAddr);
			String addr = (foundviaAddress3.get(indexOfviaAddress3).getFeatureName());
			viapoint3.setText(addr);
		}else if(requestCode == 5) {
			indexOfviaAddress4 = Integer.parseInt(retAddr);
			String addr = (foundviaAddress4.get(indexOfviaAddress4).getFeatureName());
			viapoint4.setText(addr);
		}
	}


	public void drawIconOnScreen(GeoPoint pointOnScreen) {
		OverlayItem item = new OverlayItem(pointOnScreen,"","");
		itemizedOverlay.addOverlay(item);
		mapOverlays.add(itemizedOverlay);
		//mapOverlays.remove(itemizedOverlay);
	}

	public void removeIconOnScreen(GeoPoint pointOnScreen) {
		OverlayItem item = new OverlayItem(pointOnScreen,"","");
		itemizedOverlay.removeOverlay(item);
		mapOverlays.remove(itemizedOverlay);
	}



	public void toastHere(CharSequence text) {
		Context context = getApplicationContext();
		int duration = Toast.LENGTH_LONG;

		Toast toast = Toast.makeText(context, text, duration);
		toast.show();
	}

	@Override
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return true;
	}
	public static void navigateToLocation (double latitude, double longitude, MapView mv) { 
		GeoPoint p = new GeoPoint((int) latitude, (int) longitude); //new GeoPoint 
		mv.displayZoomControls(true); //display Zoom (seems that it doesn't work yet) 
		MapController mc = mv.getController(); 
		mc.animateTo(p); //move map to the given point 
		//int zoomlevel = mv.getMaxZoomLevel(); //detect maximum zoom level 
		//mc.setZoom(zoomlevel - 1); //zoom 
		mv.setSatellite(false); //display only "normal" mapview  
	}


}
