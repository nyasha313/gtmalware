package com.malware.android;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import com.malware.common.dto.ServerRequest;
import com.malware.common.dto.ServerResponse;
import com.malware.common.dto.Trip;
import com.malware.common.dto.ServerRequest.ServerMethod;
import com.malware.common.dto.ServerResponse.ResponseCode;
import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.Overlay;
import com.google.android.maps.OverlayItem;

import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.DashPathEffect;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.location.Address;
import android.location.Geocoder;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.View.OnTouchListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;
import android.app.NotificationManager;
import android.app.Notification;
import com.malware.maps.*;

public class MalwareMaps extends MapActivity{

	List<Overlay> mapOverlays;
	Drawable drawable;
	HelloItemizedOverlay itemizedOverlay;
	MapView mapView;
	//Canvas canvas = new Canvas();
	Geocoder gc;
	double lat;
	double lon;
	Button btnSearch, fromGo, toGo;
	EditText sourceAddress, destAddress, datePicker, timePicker, numSeats;
	EditText viapoint;
	TextView intpoint;

	List<String> viaPoints = new ArrayList<String>();

	int indexOfSourceAddress;
	int indexOfDestAddress;
	int indexOfviaAddress1;
	int indexOfviaAddress2;
	int indexOfviaAddress3;
	int indexOfviaAddress4;

	List<Address> foundAdresses;
	List<Address> foundDestAddresses;
	List<Address> foundviaAddress1;
	List<Address> foundviaAddress2;
	List<Address> foundviaAddress3;
	List<Address> foundviaAddress4;

	//Spinner intpoints; //added
	Button btnAddviapoint;//added
	Button btnRemviapoint;//added

	List<Integer> viaLats = new ArrayList<Integer>();
	List<Integer> viaLongs = new ArrayList<Integer>();
	List<String> viaTexts = new ArrayList<String>();

	Context myContext;

	Trip tripObject = new Trip();
	boolean isDriverTrip = false;
	ProgressDialog dialog = null;
	Handler mapsHandler = new Handler();

	ServerResponse response = null;

	static int count=0;
	private int mYear;
	private int mMonth;
	private int mDay;
	private int mHour;
	private int mMinute;

	static final int DATE_DIALOG_ID = 0;
	static final int TIME_DIALOG_ID = 1;

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.malware_map);
		
		Date d = Calendar.getInstance().getTime();
		
		timePicker.setText(d.getHours() + ":" + d.getMinutes());
		datePicker.setText(d.getMonth() + "/" + d.getDay() + "/" + d.getYear());

		Bundle b = this.getIntent().getExtras();
		String uu = b.getString("riderOrDriver");
		if(uu.equals("rider"))
		{
			isDriverTrip = false;
		}

		if(uu.equals("driver"))
		{
			isDriverTrip = true;
		}

		myContext = this;
		mapView = (MapView) findViewById(R.id.mapview);
		mapView.setBuiltInZoomControls(true);


		btnSearch = (Button) findViewById(R.id.mapview_btn_search); 
		fromGo = (Button) findViewById(R.id.from_go); 
		toGo = (Button) findViewById(R.id.to_go); 
		datePicker = (EditText) findViewById(R.id.edit_datepicker);
		timePicker = (EditText) findViewById(R.id.edit_timepicker);
		sourceAddress = (EditText) findViewById(R.id.source_address); 
		destAddress = (EditText) findViewById(R.id.dest_address); 
		viapoint = (EditText) findViewById(R.id.via_point);
		btnAddviapoint = (Button) findViewById(R.id.btn_addviapoint);
		numSeats = (EditText) findViewById(R.id.num_seats);
		//    btnRemviapoint= (Button)findViewById(R.id.btn_remviapoint);
		intpoint = (TextView) findViewById(R.id.interpoint);
		//btnRemviapoint.setVisibility(View.INVISIBLE);


		mapOverlays = mapView.getOverlays();
		drawable = this.getResources().getDrawable(R.drawable.square);
		itemizedOverlay = new HelloItemizedOverlay(drawable);

		GeoPoint p = new GeoPoint(19240000,-99120000);
		MapController mc = mapView.getController();


		gc = new Geocoder(this); //create new geocoder instance 
		/*
		btnRemviapoint.setOnClickListener(new OnClickListener() { 
		      public void onClick(View v) { 

			        String viaPoint = viapoint.getText().toString(); //added

			        try { 


			          List<Address> foundviaAdresses = gc.getFromLocationName(viaPoint, 5); //Search addresses 

			          if (foundviaAdresses.size() == 0) { //if no address found, display an error 
			            Dialog locationError = new AlertDialog.Builder(myContext) 
			              .setIcon(0) 
			              .setTitle("Error") 
			              .setPositiveButton("Ok", null) 
			              .setMessage("Sorry, your via address doesn't exist.") 
			              .create(); 
			            locationError.show(); 
			          } 
			          else { //else display address on map 
			            for (int i = 0; i < foundviaAdresses.size(); ++i) { 
			              //Save results as Longitude and Latitude 
			              //@todo: if more than one result, then show a select-list 
			              Address x = foundviaAdresses.get(i); 
			              lat = x.getLatitude(); 
			              lon = x.getLongitude(); 
			            } 
			          navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
			          GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
			          removeIconOnScreen(p);
			          }


			        } 
			        catch (Exception e) { 
			          //@todo: Show error message 
			        } 

			      } 
			    });
		 */

		//btnDatePicker.setOnClickListener(new OnClickListener() 
		datePicker.setOnTouchListener(new OnTouchListener() {
			
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				// TODO Auto-generated method stub
				showDialog(DATE_DIALOG_ID);
				return false;
			}
		});

		timePicker.setOnTouchListener(new OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				// TODO Auto-generated method stub
				showDialog(TIME_DIALOG_ID);
				return false;
			}
		});
		/*		
		datePicker.setOnClickListener(new OnClickListener() 
		{ 
			public void onClick(View v) {
				showDialog(DATE_DIALOG_ID);
			}
		});

		timePicker.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				showDialog(TIME_DIALOG_ID);
			}
		});
		 */
		final Calendar c = Calendar.getInstance();
		mYear = c.get(Calendar.YEAR);
		mMonth = c.get(Calendar.MONTH);
		mDay = c.get(Calendar.DAY_OF_MONTH);
		mHour = c.get(Calendar.HOUR_OF_DAY);
		mMinute = c.get(Calendar.MINUTE);


		//updateDisplay();


		btnAddviapoint.setOnClickListener(new OnClickListener() { 
			public void onClick(View v) { 

				count++;

				if(count<4)
				{
					String viaAddressInput = viapoint.getText().toString(); //Get input text		                     
					try {                             
						foundviaAddress1 = gc.getFromLocationName(viaAddressInput, 5); //Search addresses 

						if (foundviaAddress1.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your via address doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 						
						else { //else display address on map 
							int i = 0;
							String sendAddresses = "";
							for (i = 0; i < foundviaAddress1.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundviaAddress1.get(i); 
								sendAddresses += getAddress( foundviaAddress1.get(i) ) + "$$$";
								indexOfviaAddress1 = i;
							}  
							if(i > 1) {
								try 
								{
									Intent intent=new Intent( MalwareMaps.this ,MalwareSelectAddress.class);
									intent.putExtra("addressFilter", sendAddresses);
									startActivityForResult(intent, 2);
								}
								catch(Exception e) {
									toastHere(e.toString());
								}
							}
							else
							{
								lat = foundviaAddress1.get(indexOfviaAddress1).getLatitude();
								lon = foundviaAddress1.get(indexOfviaAddress1).getLongitude();

								viaLats.add((int)(lat*1000000));
								viaLongs.add((int)(lon*1000000));
								viaTexts.add(viapoint.getText().toString());

								try { 
									if(viapoint.getText().toString().length()!=0)
									{
										String viaPoint = viapoint.getText().toString();
										List<Address> foundviaAdresses = gc.getFromLocationName(viaPoint, 5); //Search addresses 

										if (foundviaAdresses.size() == 0) { //if no address found, display an error 
											Dialog locationError = new AlertDialog.Builder(myContext) 
											.setIcon(0) 
											.setTitle("Error") 
											.setPositiveButton("Ok", null) 
											.setMessage("Sorry, your via address doesn't exist.") 
											.create(); 
											locationError.show(); 
										} 
										else { //else display address on map 
											for (int ii = 0; ii < foundviaAdresses.size(); ++ii) { 
												//Save results as Longitude and Latitude 
												//@todo: if more than one result, then show a select-list 
												Address x = foundviaAdresses.get(ii); 
												lat = x.getLatitude(); 
												lon = x.getLongitude(); 
											} 
											navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
											GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
											drawIconOnScreen(p);
										}
									}

								} 
								catch (Exception e) { 
									//@todo: Show error message 
								} 
								viapoint.setText("");   

							}
						}
					}
					catch(Exception e) {
						toastHere(e.toString());
					}



				}

				else
				{
					Dialog locationError = new AlertDialog.Builder(myContext) 
					.setIcon(0) 
					.setTitle("Error") 
					.setPositiveButton("Ok", null) 
					.setMessage("Sorry, You can add only three via points") 
					.create(); 
					locationError.show();
				}
			} 
		});

		fromGo.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				// TODO Auto-generated method stub

				String addressInput = sourceAddress.getText().toString(); //Get input text 		                     
				try {                             
					foundAdresses = gc.getFromLocationName(addressInput, 10); //Search addresses 
					Bundle extras = new Bundle();   

					if (foundAdresses.size() == 0) { //if no address found, display an error 
						Dialog locationError = new AlertDialog.Builder(myContext) 
						.setIcon(0) 
						.setTitle("Error") 
						.setPositiveButton("Ok", null) 
						.setMessage("Sorry, your source address doesn't exist.") 
						.create(); 
						locationError.show(); 
					} 
					else { //else display address on map
						int i;
						String sendAddresses = "";
						for ( i = 0; i < foundAdresses.size(); ++i) { 
							//Save results as Longitude and Latitude 
							//@todo: if more than one result, then show a select-list 
							Address x = foundAdresses.get(i);
							sendAddresses += getAddress( foundAdresses.get(i) ) + "$$$";
							indexOfSourceAddress = i;
							//addressIndices.remove(0);
							//addressIndices.add(0, i); 
						} 
						if(i > 1) {
							try {
								Intent intent=new Intent( MalwareMaps.this ,MalwareSelectAddress.class);
								intent.putExtra("addressFilter", sendAddresses);
								startActivityForResult(intent, 0);
							}
							catch(Exception e) {
								toastHere(e.toString());
							}
						}
					}
				}
				catch(Exception e) {
					toastHere(e.toString());
				}
			}
		}

		);

		toGo.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View view) {
				// TODO Auto-generated method stub

				String destAddressInput = destAddress.getText().toString(); //Get input text		                     
				try {                             
					Bundle extras = new Bundle();
					foundDestAddresses = gc.getFromLocationName(destAddressInput, 5); //Search addresses 

					if (foundDestAddresses.size() == 0) { //if no address found, display an error 
						Dialog locationError = new AlertDialog.Builder(myContext) 
						.setIcon(0) 
						.setTitle("Error") 
						.setPositiveButton("Ok", null) 
						.setMessage("Sorry, your destination address doesn't exist.") 
						.create(); 
						locationError.show(); 
					} 						
					else { //else display address on map 
						int i = 0;
						String sendAddresses = "";
						for (i = 0; i < foundDestAddresses.size(); ++i) { 
							//Save results as Longitude and Latitude 
							//@todo: if more than one result, then show a select-list 
							Address x = foundDestAddresses.get(i); 
							sendAddresses += getAddress( foundDestAddresses.get(i) ) + "$$$";
							indexOfDestAddress = i;
							//addressIndices.remove(1);
							//addressIndices.add(1, i);
						}  
						if(i > 1) {
							try {
								Intent intent=new Intent( MalwareMaps.this ,MalwareSelectAddress.class);
								intent.putExtra("addressFilter", sendAddresses);
								startActivityForResult(intent, 1);
							}
							catch(Exception e) {
								toastHere(e.toString());
							}
						}
					}
				}
				catch(Exception e) {
					toastHere(e.toString());
				}

			}
		}
		);

		btnSearch.setOnClickListener(new OnClickListener() { 
			public void onClick(View v) { 

				if( sourceAddress.hasFocus() ) {
					sourceAddress.clearFocus();
				}
				else if( destAddress.hasFocus() ) {
					destAddress.clearFocus();
				}
				else if( viapoint.hasFocus() ) {
					viapoint.clearFocus();
				}

				// Source address
				if(sourceAddress.getText().length() > 1) {
					lat = foundAdresses.get(indexOfSourceAddress).getLatitude();
					lon = foundAdresses.get(indexOfSourceAddress).getLongitude();
					tripObject.setSourceLat((int)(lat*1000000));
					tripObject.setSourceLng((int)(lon*1000000));
					tripObject.setSourceText(sourceAddress.getText().toString());
					navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
					GeoPoint sourceP = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
					drawIconOnScreen(sourceP);
				}

				// Destination address
				if(destAddress.getText().length() > 1) {
					lat = foundDestAddresses.get(indexOfDestAddress).getLatitude();
					lon = foundDestAddresses.get(indexOfDestAddress).getLongitude();

					tripObject.setDestinationLat((int)(lat*1000000));
					tripObject.setDestinationLng((int)(lon*1000000));
					tripObject.setDestinationText(destAddress.getText().toString());

					navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
					GeoPoint destP = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
					drawIconOnScreen(destP);
				}

				if(viapoint.getText().length() > 1) {
					lat = foundviaAddress1.get(indexOfviaAddress1).getLatitude();
					lon = foundviaAddress1.get(indexOfviaAddress1).getLongitude();

					viaLats.add((int)(lat*1000000));
					viaLongs.add((int)(lon*1000000));
					viaTexts.add(viapoint.getText().toString());

					navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
					GeoPoint viaP1 = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
					drawIconOnScreen(viaP1);
				}

				tripObject.setViaPointsLat(viaLats);
				tripObject.setViaPointsLng(viaLongs);
				tripObject.setViaPointsText(viaTexts);
				tripObject.setUserEmailAddress(MalwareDefaults.loginEmailAddress);
				tripObject.setDriverTrip(isDriverTrip);
				tripObject.setNumSeatsAvailable(Integer.parseInt(numSeats.getText().toString()));
				Date temp = new Date(mYear, mMonth, mDay, mHour, mMinute);
				tripObject.setStartDateTime(temp.getTime());

				ServerRequest s = new ServerRequest();
				s.setTrip(tripObject);
				s.setServerMethod(ServerMethod.STORE_TRIP);
				response = MalwareHttpSender.sendData(s);
				if(response.getResponseCode() == ResponseCode.SUCCESS)
				{
					toastHere("Trip successfully posted!");
				}
				//Add OVERLAY here

				GeoPoint srcGeoPoint, destGeoPoint;
				srcGeoPoint = new GeoPoint(tripObject.getSourceLat(), tripObject.getSourceLng());
				destGeoPoint = new GeoPoint(tripObject.getDestinationLat(), tripObject.getDestinationLng());

				@SuppressWarnings("unused")
				String url = parseURL(srcGeoPoint, destGeoPoint).toString();				

				//url = "http://maps.google.com/maps?f=d&hl=en&saddr=atlanta&daddr=miami";
				//mc.animateTo(srcGeoPoint);
				startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));				
			}

		});     	
	}

	private String getAddress(Address addr) {
		String addrString = "", tmp = "";
		int maxLength = addr.getMaxAddressLineIndex();

		for(int i=0; i< maxLength; ++i) {
			if(i < maxLength - 1) {
			if( (tmp = addr.getAddressLine(i)).length() > 0 )
				addrString += tmp + ", ";
			}
			else
				if( (tmp = addr.getAddressLine(i)).length() > 0 )
					addrString += tmp;
			
		}

		return addrString;
	}

	private StringBuilder parseURL(GeoPoint src,GeoPoint dest) {
		// connect to map web service
		StringBuilder urlString = new StringBuilder();
		urlString.append("http://maps.google.com/maps?f=d&hl=en");
		urlString.append("&saddr=");//from
		urlString.append( Double.toString((double)src.getLatitudeE6()/1.0E6 ));
		urlString.append(",");
		urlString.append( Double.toString((double)src.getLongitudeE6()/1.0E6 ));
		urlString.append("&daddr=");//to
		urlString.append( Double.toString((double)dest.getLatitudeE6()/1.0E6 ));
		urlString.append(",");
		urlString.append( Double.toString((double)dest.getLongitudeE6()/1.0E6 ));
		return urlString;
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent returnIntent) {
		super.onActivityResult(requestCode, resultCode, returnIntent);
		/*
		 * FIXME: sanity checks required here. app crashes if you press back
		 */
		Bundle extras = returnIntent.getExtras();
		String retAddr = (extras.getString("SelectedValue"));
		//addressIndices.remove(requestCode);
		//addressIndices.add(requestCode, indexOfAddress);
		//toastHere(String.valueOf(requestCode));

		if(requestCode == 0) {
			indexOfSourceAddress = Integer.parseInt(retAddr);
			String addr = (getAddress( foundAdresses.get(indexOfSourceAddress) ));
			sourceAddress.setText(addr);
		}
		else if(requestCode == 1) {
			indexOfDestAddress = Integer.parseInt(retAddr);
			String addr = (getAddress( foundDestAddresses.get(indexOfDestAddress) ));
			destAddress.setText(addr);
		}
		else if(requestCode == 2) {
			indexOfviaAddress1 = Integer.parseInt(retAddr);
			String addr = (getAddress( foundviaAddress1.get(indexOfviaAddress1) ));
			//viapoint.setText(addr);
			lat = foundviaAddress1.get(indexOfviaAddress1).getLatitude();
			lon = foundviaAddress1.get(indexOfviaAddress1).getLongitude();

			viaLats.add((int)(lat*1000000));
			viaLongs.add((int)(lon*1000000));
			viaTexts.add(addr);
			toastHere(addr+" added as an intermediate point");
		}
	}


	public void drawIconOnScreen(GeoPoint pointOnScreen) {
		OverlayItem item = new OverlayItem(pointOnScreen,"","");
		itemizedOverlay.addOverlay(item);
		mapOverlays.add(itemizedOverlay);
		//mapOverlays.remove(itemizedOverlay);
	}

	public void removeIconOnScreen(GeoPoint pointOnScreen) {
		OverlayItem item = new OverlayItem(pointOnScreen,"","");
		itemizedOverlay.removeOverlay(item);
		mapOverlays.remove(itemizedOverlay);
	}



	public void toastHere(CharSequence text) {
		Context context = getApplicationContext();
		int duration = Toast.LENGTH_LONG;

		Toast toast = Toast.makeText(context, text, duration);
		toast.show();
	}

	@Override
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return true;
	}
	public static void navigateToLocation (double latitude, double longitude, MapView mv) { 
		GeoPoint p = new GeoPoint((int) latitude, (int) longitude); //new GeoPoint 
		mv.displayZoomControls(true); //display Zoom (seems that it doesn't work yet) 
		MapController mc = mv.getController(); 
		mc.animateTo(p); //move map to the given point 
		//int zoomlevel = mv.getMaxZoomLevel(); //detect maximum zoom level 
		//mc.setZoom(zoomlevel - 1); //zoom 
		mv.setSatellite(false); //display only "normal" mapview  
	}

	private DatePickerDialog.OnDateSetListener mDateSetListener =
		new DatePickerDialog.OnDateSetListener() {

		public void onDateSet(DatePicker view, int year, 
				int monthOfYear, int dayOfMonth) {
			mYear = year;
			mMonth = monthOfYear;
			mDay = dayOfMonth;
			timePicker.setText(mMonth + "/" + mMinute + "/" + mYear);
			// updateDisplay();
		}
	};

	private TimePickerDialog.OnTimeSetListener mTimeSetListener =
		new TimePickerDialog.OnTimeSetListener() {
		public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
			mHour = hourOfDay;
			mMinute = minute;
			timePicker.setText(mHour + ":" + mMinute);
			//updateDisplay();
		}
	};


	protected Dialog onCreateDialog(int id) {
		switch (id) {
		case DATE_DIALOG_ID:
			return new DatePickerDialog(this,
					mDateSetListener,
					mYear, mMonth, mDay);
		case TIME_DIALOG_ID:
			return new TimePickerDialog(this,
					mTimeSetListener, mHour, mMinute, false);

		}
		return null;
	}


}
