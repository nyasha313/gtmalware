package com.malware.android;


import java.util.List;
import java.util.Vector;


import com.malware.maps.DrivingDirections.Mode;
import com.google.android.maps.GeoPoint;
import com.google.android.maps.MapActivity;
import com.google.android.maps.MapController;
import com.google.android.maps.MapView;
import com.google.android.maps.Overlay;
import com.google.android.maps.OverlayItem;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.DashPathEffect;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.drawable.Drawable;
import android.location.Address;
import android.location.Geocoder;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import android.app.NotificationManager;
import android.app.Notification;
import com.malware.maps.*;

public class MalwareMaps extends MapActivity{

	List<Overlay> mapOverlays;
	Drawable drawable;
	HelloItemizedOverlay itemizedOverlay;
	MapView mapView;
	//Canvas canvas = new Canvas();
	LocationOverlay lineObj;
	Geocoder gc;
	double lat;
	double lon;
	Button btnSearch;
	EditText sourceAddress, destAddress;
	EditText viapoint, viapoint2, viapoint3, viapoint4;//added
	TextView intpoint, intpoint2, intpoint3, intpoint4;

	int indexOfAddress;
	Vector<Integer> vectAddrIndex = new Vector<Integer>(10);
	//List<Integer> addressIndices;
	List<Address> foundAdresses;
	List<Address> foundDestAddresses;

	//Spinner intpoints; //added
	Button btnAddviapoint;//added
	Button btnRemviapoint;//added

	Context myContext;

	static int count=0;
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.malware_map);
		myContext = this;
		mapView = (MapView) findViewById(R.id.mapview);
		mapView.setBuiltInZoomControls(true);


		btnSearch = (Button) findViewById(R.id.mapview_btn_search); //Get button from XML 
		sourceAddress = (EditText) findViewById(R.id.source_address); //Get source address from XML
		destAddress = (EditText) findViewById(R.id.dest_address); //Get destination address from XML
		viapoint = (EditText) findViewById(R.id.via_point); //added
		btnAddviapoint = (Button) findViewById(R.id.btn_addviapoint);
		//    btnRemviapoint= (Button)findViewById(R.id.btn_remviapoint);
		viapoint2 = (EditText) findViewById(R.id.via_point2);
		viapoint3 = (EditText) findViewById(R.id.via_point3);
		intpoint2 = (TextView) findViewById(R.id.interpoint2);
		intpoint3 = (TextView) findViewById(R.id.interpoint3);
		intpoint = (TextView) findViewById(R.id.interpoint);
		viapoint4 = (EditText) findViewById(R.id.via_point4);
		intpoint4 = (TextView) findViewById(R.id.interpoint4);

		viapoint4.setVisibility(View.INVISIBLE);
		intpoint4.setVisibility(View.INVISIBLE);
		viapoint2.setVisibility(View.INVISIBLE);
		viapoint3.setVisibility(View.INVISIBLE);
		intpoint2.setVisibility(View.INVISIBLE);
		intpoint3.setVisibility(View.INVISIBLE);
		viapoint.setVisibility(View.INVISIBLE);
		intpoint.setVisibility(View.INVISIBLE);
		//btnRemviapoint.setVisibility(View.INVISIBLE);


		mapOverlays = mapView.getOverlays();
		drawable = this.getResources().getDrawable(R.drawable.square);
		itemizedOverlay = new HelloItemizedOverlay(drawable);

		GeoPoint p = new GeoPoint(19240000,-99120000);
		MapController mc = mapView.getController();


		gc = new Geocoder(this); //create new geocoder instance 
		/*
		btnRemviapoint.setOnClickListener(new OnClickListener() { 
		      public void onClick(View v) { 

			        String viaPoint = viapoint.getText().toString(); //added

			        try { 


			          List<Address> foundviaAdresses = gc.getFromLocationName(viaPoint, 5); //Search addresses 

			          if (foundviaAdresses.size() == 0) { //if no address found, display an error 
			            Dialog locationError = new AlertDialog.Builder(myContext) 
			              .setIcon(0) 
			              .setTitle("Error") 
			              .setPositiveButton("Ok", null) 
			              .setMessage("Sorry, your via address doesn't exist.") 
			              .create(); 
			            locationError.show(); 
			          } 
			          else { //else display address on map 
			            for (int i = 0; i < foundviaAdresses.size(); ++i) { 
			              //Save results as Longitude and Latitude 
			              //@todo: if more than one result, then show a select-list 
			              Address x = foundviaAdresses.get(i); 
			              lat = x.getLatitude(); 
			              lon = x.getLongitude(); 
			            } 
			          navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
			          GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
			          removeIconOnScreen(p);
			          }


			        } 
			        catch (Exception e) { 
			          //@todo: Show error message 
			        } 

			      } 
			    });
		 */
		btnAddviapoint.setOnClickListener(new OnClickListener() { 
			public void onClick(View v) { 

				String viaPoint = viapoint.getText().toString(); //added
				count++;

				if(count == 1)
				{
					intpoint.setVisibility(0);
					viapoint.setVisibility(0);
				}
				else if(count == 2)
				{
					viapoint2.setVisibility(0);
					intpoint2.setVisibility(0);
				}
				else if(count == 3)
				{
					viapoint3.setVisibility(0);
					intpoint3.setVisibility(0);
				}
				else if(count == 4)
				{
					viapoint4.setVisibility(0);
					intpoint4.setVisibility(0);
				}
			} 
		});

		sourceAddress.setOnFocusChangeListener(new OnFocusChangeListener() {

			@Override
			public void onFocusChange(View arg0, boolean arg1) {
				// TODO Auto-generated method stub
				if(arg1 == false) {
					String addressInput = sourceAddress.getText().toString(); //Get input text 		                     
					try {                             
						foundAdresses = gc.getFromLocationName(addressInput, 10); //Search addresses 
						Bundle extras = new Bundle();   

						if (foundAdresses.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your source address doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 
						else { //else display address on map
							int i;
							String sendAddresses = "";
							for ( i = 0; i < foundAdresses.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundAdresses.get(i);
								sendAddresses += foundAdresses.get(i).getFeatureName() + "$$$";
								indexOfAddress = 0;
								//addressIndices.remove(0);
								//addressIndices.add(0, i); 
							} 
							if(i > 1) {
								try {
									Intent intent=new Intent( MalwareMaps.this ,MalwareSelectAddress.class);
									intent.putExtra("addressFilter", sendAddresses);
									startActivityForResult(intent, 0);
								}
								catch(Exception e) {
									toastHere(e.toString());
								}
							}
						}
					}
					catch(Exception e) {
						toastHere(e.toString());
					}
				}
			}
		}
		);
		destAddress.setOnFocusChangeListener(new OnFocusChangeListener() {

			@Override
			public void onFocusChange(View arg0, boolean arg1) {
				// TODO Auto-generated method stub
				if(arg1 == false) {
					String destAddressInput = destAddress.getText().toString(); //Get input text		                     
					try {                             
						Bundle extras = new Bundle();
						foundDestAddresses = gc.getFromLocationName(destAddressInput, 5); //Search addresses 

						if (foundDestAddresses.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your destination address doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 						
						else { //else display address on map 
							int i = 0;
							String sendAddresses = "";
							for (i = 0; i < foundDestAddresses.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundDestAddresses.get(i); 
								sendAddresses += foundDestAddresses.get(i).getFeatureName() + "$$$";
								indexOfAddress = i;
								//addressIndices.remove(1);
								//addressIndices.add(1, i);
							}  
							if(i > 1) {
								try {
									Intent intent=new Intent( MalwareMaps.this ,MalwareSelectAddress.class);
									intent.putExtra("addressFilter", sendAddresses);
									startActivityForResult(intent, 1);
								}
								catch(Exception e) {
									toastHere(e.toString());
								}
							}
						}
					}
					catch(Exception e) {
						toastHere(e.toString());
					}
				}
			}
		}
		);

		// Click Event for GO

		btnSearch.setOnClickListener(new OnClickListener() { 
			public void onClick(View v) { 

				if( destAddress.hasFocus() ) {
					destAddress.clearFocus();
				}/*
				else if( viapoint.hasFocus() ) {
					viapoint.clearFocus();
				}
				else if(viapoint2.hasFocus()) {
					viapoint2.clearFocus();
				}
				else if(viapoint3.hasFocus()) {
					viapoint2.clearFocus();
				}
				else if(viapoint4.hasFocus()) {
					viapoint2.clearFocus();
				}*/
				// Source address
				lat = foundAdresses.get(indexOfAddress).getLatitude();
				lon = foundAdresses.get(indexOfAddress).getLongitude();
				navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
				GeoPoint sourceP = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
				drawIconOnScreen(sourceP);

				// Destination address
				lat = foundDestAddresses.get(indexOfAddress).getLatitude();
				lon = foundDestAddresses.get(indexOfAddress).getLongitude();
				navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
				GeoPoint destP = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
				drawIconOnScreen(destP);

				try {

					if(viapoint.getText().toString().length()!=0)
					{
						String viaPoint = viapoint.getText().toString();
						List<Address> foundviaAdresses = gc.getFromLocationName(viaPoint, 5); //Search addresses 

						if (foundviaAdresses.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your via address doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 
						else { //else display address on map 
							for (int i = 0; i < foundviaAdresses.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundviaAdresses.get(i); 
								lat = x.getLatitude(); 
								lon = x.getLongitude(); 
							} 
							navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
							GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
							drawIconOnScreen(p);
						}
					}
					if(viapoint2.getText().toString().length()!=0)
					{
						String viaPoint2 = viapoint2.getText().toString(); 
						List<Address> foundviaAdresses2 = gc.getFromLocationName(viaPoint2, 5); //Search addresses 

						if (foundviaAdresses2.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your via address 2 doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 
						else { //else display address on map 
							for (int i = 0; i < foundviaAdresses2.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundviaAdresses2.get(i); 
								lat = x.getLatitude(); 
								lon = x.getLongitude(); 
							} 
							navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
							GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
							drawIconOnScreen(p);
						}
					}
					if(viapoint3.getText().toString().length()!=0)
					{
						String viaPoint3 = viapoint3.getText().toString(); 
						List<Address> foundviaAdresses3 = gc.getFromLocationName(viaPoint3, 5); //Search addresses 

						if (foundviaAdresses3.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your via address 3 doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 
						else { //else display address on map 
							for (int i = 0; i < foundviaAdresses3.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundviaAdresses3.get(i); 
								lat = x.getLatitude(); 
								lon = x.getLongitude(); 
							} 
							navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
							GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
							drawIconOnScreen(p);
						}
					}
					if(viapoint4.getText().toString().length()!=0)
					{
						String viaPoint4 = viapoint4.getText().toString(); 
						List<Address> foundviaAdresses4 = gc.getFromLocationName(viaPoint4, 5); //Search addresses 

						if (foundviaAdresses4.size() == 0) { //if no address found, display an error 
							Dialog locationError = new AlertDialog.Builder(myContext) 
							.setIcon(0) 
							.setTitle("Error") 
							.setPositiveButton("Ok", null) 
							.setMessage("Sorry, your via address 3 doesn't exist.") 
							.create(); 
							locationError.show(); 
						} 
						else { //else display address on map 
							for (int i = 0; i < foundviaAdresses4.size(); ++i) { 
								//Save results as Longitude and Latitude 
								//@todo: if more than one result, then show a select-list 
								Address x = foundviaAdresses4.get(i); 
								lat = x.getLatitude(); 
								lon = x.getLongitude(); 
							} 
							navigateToLocation((lat * 1000000), (lon * 1000000), mapView); //display the found address
							GeoPoint p = new GeoPoint((int)(lat * 1000000), (int)(lon * 1000000));
							drawIconOnScreen(p);
						}
					}
				}
				catch(Exception e) {
					toastHere(e.toString());
				}

			} 
		});     	
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent returnIntent) {
		super.onActivityResult(requestCode, resultCode, returnIntent);
		Bundle extras = returnIntent.getExtras();
		String retAddr = (extras.getString("SelectedValue"));
		indexOfAddress = Integer.parseInt(retAddr);
		//addressIndices.remove(requestCode);
		//addressIndices.add(requestCode, indexOfAddress);
		toastHere(String.valueOf(requestCode));
		
		//vectAddrIndex.set(requestCode, indexOfAddress);
		if(requestCode == 0) {
			String addr = (foundAdresses.get(indexOfAddress).getFeatureName());
			sourceAddress.setText(addr);
			}
		else if(requestCode == 1) {
			String addr = (foundDestAddresses.get(indexOfAddress).getFeatureName());
			destAddress.setText(addr);
			}
		else if(requestCode == 2) {
			String addr = (foundDestAddresses.get(indexOfAddress).getFeatureName());
			viapoint.setText(addr);
		}
		else if(requestCode == 3) {
			String addr = (foundDestAddresses.get(indexOfAddress).getFeatureName());
			viapoint2.setText(addr);
		}
		else if(requestCode == 4) {
			String addr = (foundDestAddresses.get(indexOfAddress).getFeatureName());
			viapoint3.setText(addr);
		}else if(requestCode == 5) {
			String addr = (foundDestAddresses.get(indexOfAddress).getFeatureName());
			viapoint4.setText(addr);
		}
	}

	public void drawIconOnScreen(GeoPoint pointOnScreen) {
		OverlayItem item = new OverlayItem(pointOnScreen,"","");
		itemizedOverlay.addOverlay(item);
		mapOverlays.add(itemizedOverlay);
		//mapOverlays.remove(itemizedOverlay);
	}

	public void removeIconOnScreen(GeoPoint pointOnScreen) {
		OverlayItem item = new OverlayItem(pointOnScreen,"","");
		itemizedOverlay.removeOverlay(item);
		mapOverlays.remove(itemizedOverlay);
	}



	public void toastHere(CharSequence text) {
		Context context = getApplicationContext();
		int duration = Toast.LENGTH_LONG;

		Toast toast = Toast.makeText(context, text, duration);
		toast.show();
	}

	@Override
	protected boolean isRouteDisplayed() {
		// TODO Auto-generated method stub
		return true;
	}
	public static void navigateToLocation (double latitude, double longitude, MapView mv) { 
		GeoPoint p = new GeoPoint((int) latitude, (int) longitude); //new GeoPoint 
		mv.displayZoomControls(true); //display Zoom (seems that it doesn't work yet) 
		MapController mc = mv.getController(); 
		mc.animateTo(p); //move map to the given point 
		//int zoomlevel = mv.getMaxZoomLevel(); //detect maximum zoom level 
		//mc.setZoom(zoomlevel - 1); //zoom 
		mv.setSatellite(false); //display only "normal" mapview  
	}


}
