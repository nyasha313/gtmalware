package com.malware.server;

import java.util.List;
import java.util.Vector;

import javax.jdo.JDOObjectNotFoundException;
import javax.jdo.PersistenceManager;

import com.malware.common.dto.Trip;
import com.malware.common.dto.User;

/**
 * Bunch of database access methods which are generally useful.
 */
public class CommonDataAccessMethods {
	
	public static List<Trip> searchTrips(String searchKeyword) {
		PersistenceManager pm = PMF.get().getPersistenceManager();
		
		// TODO(kaushikr): Make a query with searchKeyword.
		String query = "select from " + Trip.class.getName();
		List<Trip> trips = (List<Trip>) pm.newQuery(query).execute();
		
		return trips;
	}
	
	public static List<Trip> searchRiderTrips(String email) {
		PersistenceManager pm = PMF.get().getPersistenceManager();
		
		// TODO(kaushikr): Make a query with searchKeyword.
		String query = "select from " + Trip.class.getName() + " " +
		               "where passengerEmailAddresses == '" + email + "' " +
		               "&& isDriverTrip == true ";
		List<Trip> trips = (List<Trip>) pm.newQuery(query).execute();
		
		return trips;
	}
	
	public static List<Trip> searchDriverTrips(String email) {
		PersistenceManager pm = PMF.get().getPersistenceManager();
		
		// TODO(kaushikr): Make a query with searchKeyword.
		String query = "select from " + Trip.class.getName() + " " +
		               "where userEmailAddress == '" + email + "' " +
		               "&& isDriverTrip == true ";
		List<Trip> trips = (List<Trip>) pm.newQuery(query).execute();
		
		return trips;
	}
	
	public static User getUser(String email) {
		PersistenceManager pm = PMF.get().getPersistenceManager();
		
		User user = null;
		try {
			user = pm.getObjectById(User.class, email);
		} catch (JDOObjectNotFoundException e) {
			return null;
		}
		
		pm.close();
		
		return user;
	}
	
	public static boolean doesEmailExist(String email) {
		return getUser(email) != null;
	}
	
	public static void storeUser(User user) {
		PersistenceManager pm = PMF.get().getPersistenceManager();
		
		pm.makePersistent(user);
		
		pm.close();
	}
}
