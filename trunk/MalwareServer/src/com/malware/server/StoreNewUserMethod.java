package com.malware.server;

import javax.jdo.PersistenceManager;

import com.malware.common.dto.ServerRequest;
import com.malware.common.dto.ServerResponse;
import com.malware.common.dto.User;
import com.malware.common.dto.ServerRequest.ServerMethod;
import com.malware.common.dto.ServerResponse.ResponseCode;

/**
 * This class stores information about a new user into the database.
 */
public class StoreNewUserMethod {

	public static ServerResponse execute(ServerRequest serverRequest) {
		assert serverRequest.getServerMethod() == ServerMethod.STORE_NEW_USER;
		
		ServerResponse serverResponse = new ServerResponse();
		
		// Get the user out of the serverRequest.
		User newUser = serverRequest.getNewUser();
		
		// Check if the email id is already present. If so, then throw back an error.
		if (doesEmailExist(newUser.getEmail())) {
			serverResponse.setResponseCode(ResponseCode.FAILURE);
			serverResponse.setReponseMessage("A user with the same email id already exists.");
			return serverResponse;
		}
		
		// Perform some basic sanity tests on the fields.
		if (newUser.getFname().trim().isEmpty()) {
			serverResponse.setResponseCode(ResponseCode.FAILURE);
			serverResponse.setReponseMessage("First name is empty.");
			return serverResponse;
		}
		if (newUser.getLname().trim().isEmpty()) {
			serverResponse.setResponseCode(ResponseCode.FAILURE);
			serverResponse.setReponseMessage("Last name is empty.");
			return serverResponse;
		}
		if (newUser.getAddress().trim().isEmpty()) {
			serverResponse.setResponseCode(ResponseCode.FAILURE);
			serverResponse.setReponseMessage("Address is empty.");
			return serverResponse;
		}
		if (newUser.getCity().trim().isEmpty()) {
			serverResponse.setResponseCode(ResponseCode.FAILURE);
			serverResponse.setReponseMessage("City is empty.");
			return serverResponse;
		}
		if (newUser.getEmail().trim().isEmpty()) {
			serverResponse.setResponseCode(ResponseCode.FAILURE);
			serverResponse.setReponseMessage("Email id is empty.");
			return serverResponse;
		}
		if (newUser.getPhone().trim().isEmpty()) {
			serverResponse.setResponseCode(ResponseCode.FAILURE);
			serverResponse.setReponseMessage("Phone is empty.");
			return serverResponse;
		}
		if (newUser.getSex() == ' ') {
			serverResponse.setResponseCode(ResponseCode.FAILURE);
			serverResponse.setReponseMessage("Sex is empty.");
			return serverResponse;
		}
		if (newUser.getZipCode().trim().isEmpty()) {
			serverResponse.setResponseCode(ResponseCode.FAILURE);
			serverResponse.setReponseMessage("Zip code is empty.");
			return serverResponse;
		}
		
		// We can now store the object into the datastore.
		storeNewUser(newUser);
		
		// Just re-lookup the datastore to ensure that the user is stored.
		if (!doesEmailExist(newUser.getEmail())) {
			serverResponse.setResponseCode(ResponseCode.FAILURE);
			serverResponse.setReponseMessage("We tried storing it the user but it did not work.");
			return serverResponse;
		}
		
		serverResponse.setResponseCode(ResponseCode.SUCCESS);
		return serverResponse;
	}
	
	public static void storeNewUser(User newUser) {
		PersistenceManager pm = PMF.get().getPersistenceManager();
		
		pm.makePersistent(newUser);
		
		pm.close();
	}
	
	public static boolean doesEmailExist(String email) {
		PersistenceManager pm = PMF.get().getPersistenceManager();
		
		User user = pm.getObjectById(User.class, email);
		
		pm.close();
		
		return user != null;
	}
}
