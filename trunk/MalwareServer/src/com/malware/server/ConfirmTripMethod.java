package com.malware.server;

import java.util.List;

import javax.jdo.PersistenceManager;
import javax.jdo.Transaction;

import com.malware.common.dto.ServerRequest;
import com.malware.common.dto.ServerResponse;
import com.malware.common.dto.Trip;
import com.malware.common.dto.ServerRequest.ServerMethod;
import com.malware.common.dto.ServerResponse.ResponseCode;

/**
 * This class stores information about a new user into the database.
 */
public class ConfirmTripMethod {

	public static ServerResponse execute(ServerRequest serverRequest) {
		assert serverRequest.getServerMethod() == ServerMethod.CONFIRM_TRIP;
		
		ServerResponse serverResponse = new ServerResponse();
		
		// Get the current trip from the request.
		Trip currentTrip = serverRequest.getUsersTrip();
		
		List<Trip> confirmWithTrips = serverRequest.getConfirmedWithTrips();
		
		// Go through the trip.
		if (currentTrip.isDriverTrip()) {
			// If it is a driver then fill in all the passengers he selected.
			currentTrip = CommonDataAccessMethods.getTrip(currentTrip.getId());
			List<String> passengerEmails = currentTrip.getPassengerEmailAddresses();
			for (int i = 0; i < confirmWithTrips.size(); ++i) {
				Trip passengerTrip = CommonDataAccessMethods.getTrip(confirmWithTrips.get(i).getId());
				
				passengerTrip.setAssigned(true);
				passengerTrip.setAssignedTo(currentTrip.getId());
				
				storeTrip(passengerTrip);
				
				passengerEmails.add(passengerTrip.getUserEmailAddress());				
				currentTrip.setNumSeatsAvailable(currentTrip.getNumSeatsAvailable() - 1);
			}
			
			storeTrip(currentTrip);
		} else {
			// If it is a rider trip then add him to that carpool.
			currentTrip = CommonDataAccessMethods.getTrip(currentTrip.getId());
			
			// Get the drivers trip.
			assert confirmWithTrips.size() == 1;
			
			Trip driverTrip = CommonDataAccessMethods.getTrip(confirmWithTrips.get(0).getId());
			
			currentTrip.setAssigned(true);
			currentTrip.setAssignedTo(driverTrip.getId());
			
			List<String> passengerEmails = driverTrip.getPassengerEmailAddresses();
			passengerEmails.add(currentTrip.getUserEmailAddress());
			driverTrip.setNumSeatsAvailable(driverTrip.getNumSeatsAvailable() - 1);
			
			storeTrip(currentTrip);
			storeTrip(driverTrip);
		}
		
		serverResponse.setResponseCode(ResponseCode.SUCCESS);
		
		return serverResponse;
	}
	

	private static Trip storeTrip(Trip trip) {
		PersistenceManager pm = PMF.get().getPersistenceManager();
		
	    final Transaction tx = pm.currentTransaction();
	    Trip returnValue = null;
	    
	    try {
	    	tx.begin();
	    	returnValue = pm.makePersistent(trip);
	    	tx.commit();
	    } catch (Exception e) {
	    	System.out.println(e);
	    } finally {
	    	if (tx.isActive()) {
	    		tx.rollback(); 
	    	}
	    	pm.close();
	    }
		return returnValue;
	}
}
